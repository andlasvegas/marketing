/*
 ==========================================================================
  $Mixins
 ==========================================================================
 */

// Add Project Link
@mixin addProject {
	@include icoMoon(plus-circle);
	background-color: darken($red, 10%);
	&:hover {
		background-color: $red;
	}	
}

// Font Smoothing
@mixin fontSmoothing($value: on) {
	@if $value == on {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}
	@else {
		-webkit-font-smoothing: subpixel-antialiased;
		-moz-osx-font-smoothing: auto;
	}
}

/*
 * Rem Fallback Mixin
 * See @ http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
 */
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin remFallback($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*10}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}

// RGBA background Color
@mixin rgbaBgndColor ($color, $opacity) {
	background-color: $color;
	background-color: rgba($color, $opacity);
}

// Selection
@mixin selection {
    ::-moz-selection { @content; }
    ::selection { @content; }
}

/*
 * IcoMoon
 * see @ http://jshak.es/easy-icomoon-icons-with-sass/
 */
@mixin icoMoon($icon, $position: "before", $replace: false) {
	// If we're replacing the text, set font-size to 0
	@if $replace {
		font-size: 0;
	}
	// Pseudo-element properties
	&:#{$position} {
		@extend .icon-#{$icon};
		font-family: 'icomoon';
		speak: none;
		font-style: normal;
		font-weight: normal;
		font-variant: normal;
		text-transform: none;
		line-height: 1;
		@if $replace {
			font-size: 1rem;
		}
		@content;

		/* Better Font Rendering =========== */
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}
}

/* 
 * Media Queries
 */
@mixin MQ($canvas) {
	// Maximum Width
	@if $canvas == XXSmax {
		@include breakpoint(max-width ($XS - 1)) {
			@content;
		}
	}
	@else if $canvas == XSmax {
		@include breakpoint(max-width ($S - 1)) {
			@content;
		}
	}
	@else if $canvas == Smax {
		@include breakpoint(max-width ($M - 1)) {
			@content;
		}
	}
	@else if $canvas == Mmax {
		@include breakpoint(max-width ($L - 1)) {
			@content;
		}
	}
	@else if $canvas == Lmax {
		@include breakpoint(max-width ($XL - 1)) {
			@content;
		}
	}

	// Minimum Width
	@if $canvas == XXS {
		@include breakpoint($XXS) {
			@content;
		}
	}
	@else if $canvas == XS {
		@include breakpoint($XS) {
			@content;
		}
	}
	@else if $canvas == S {
		@include breakpoint($S) {
			@content;
		}
	}
	@else if $canvas == M {
		@include breakpoint($M) {
			@content;
		}
	}
	@else if $canvas == L {
		@include breakpoint($L) {
			@content;
		}
	}
	@else if $canvas == XL {
		@include breakpoint($XL) {
			@content;
		}
	}

	// Minimum to Maximum Width
	@else if $canvas == XXStoXS {
		@include breakpoint($XXS ($XS - 1)) {
			@content;
		}
	}
	@else if $canvas == XStoS {
		@include breakpoint($XS ($S - 1)) {
			@content;
		}
	}
	@else if $canvas == StoM {
		@include breakpoint($S ($M - 1)) {
			@content;
		}
	}
	@else if $canvas == MtoL {
		@include breakpoint($M ($L - 1)) {
			@content;
		}
	}
	@else if $canvas == LtoXL {
		@include breakpoint($L ($XL - 1)) {
			@content;
		}
	}
}

/*
 * Superfish Menu
 */
@mixin superfish {
	// Common
	ul {
		margin: 0;
		padding: 0;
		list-style: none;
		li {
			margin: inherit;
			padding: inherit;
			list-style: inherit;
			position: relative;
			&:hover > ul,
			&.sfHover > ul {
				display: block;
			}
		}
		a {
			display: block;
			position: relative;
		}
	}

	// Parent Links
	> ul.menu {
		display: table;
		> li {
			float: left;
		}
	}

	// Expanded
	ul.menu ul {
		position: absolute;
		display: none;
		top: 100%;
		left: 0;
		z-index: 99;
		ul {
			top: 0;
			left: 100%;
		}
	}
}

/* 
 * Triangles
 */
@mixin triangle($size: 12px, $color: blue, $position: bottom) {
	position: relative;
	&:after {
		display: block;
		content: ' ';
		position: absolute;
		border: $size solid transparent;
		@if $position == bottom {
			top: 100%;
			left: 50%;
			margin-left: -$size;
			border-top-color: $color; 
		}
		@else if $position == top {
			bottom: 100%;
			left: 50%;
			margin-left: -$size;
			border-bottom-color: $color; 
		}
		@else if $position == left {
			right: 100%;
			top: 50%;
			margin-top: -$size;			
			border-right-color: $color; 
		}
		@else if $position == right {
			left: 100%;
			top: 50%;
			margin-top: -$size;			
			border-left-color: $color; 
		}
	}
}